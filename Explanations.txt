Enhancing Support and Thresholds:

When analyzing overhanging facets and roughness, we rely on the default parameters of FDM printers (set at 45 degrees). 
Additionally, our small part analysis is conducted with an oriented nozzle width of 4 mm (default setting). However, for more tailored results aligned with your printer's specifications,
feel free to adjust these parameters accordingly.

Curses.py:
This file serves as the hub for the main menu and essential definitions.

Meshloader.py:
Instantiation of the pyvista mesh to be run in pyvistaAQT and to allow user to choose the File.

Non-Watertight:
In real-world printing, meticulous attention to surface openings and infill specifications is crucial. 
Failure to ensure cleanness and precision may necessitate corrective measures.We recommended that all the meshs analysed aree watertight,otherwise unknown bugs could occur.

Toppling:
Toppling considers both warping and therefore shrinkage calculations.While it doesn't analyse the Support itself's role,all the calculations are based on the normal usage of straight support when overhangs are present.

Vx.py:
This module is designed to pinpoint overhangs in the mesh and visualize them.

Small_Parts:
Estimates the precision loss in small parts due to printer limitations.

Warping.py:
Warping, often confined to corners, is primarily influenced by print bed cleanliness and temperature regulation. While our method involves analyzing edge size, number of spiky corners, and first layer considerations, it's primarily based on shrinkage percentage and its impact on the first layer. For those interested, we recommend further exploration of warping prediction using visual heat images through the provided [research link](https://www.researchgate.net/publication/355119774_A_STUDY_ON_THERMAL_BEHAVIOUR_OF_A_3D_PRINTER_AND_EXTRUDED_MATERIAL_WITH_THERMAL_IMAGING_METHOD)

Warping_Formula.py:
A concise formula developed to calculate variables based on user-defined configurations.Separated to improve understanding of the calculus made.

Temperature:
While direct temperature optimization isn't provided in the code due to its divergence in a general analysis, optimizing geometry indirectly enhances heat dispersion. For those inclined to calibrate or explore temperature optimization methods, we recommend utilizing tools like GCodeutils or Octoprint smart calibration. Additionally,filament and spool checks are advised for quality assurance.

By optimizing geometry, our approach mitigates various printing issues, including stringing, uneven surfaces (blobs), partial warping, toppling (often triggered by warping), and many others.

Roughness:
Cells requiring support (overhanging) and those in direct contact with it may exhibit roughness due to minimal fusion for stability.Roughness Dictates the general uneveness of the surface,so that prints can be expected to fit/accomplish their functions with adequate rotation and optimization.
